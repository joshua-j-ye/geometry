name: Build and Deploy Geometry Jump

permissions:
  contents: write
  packages: write
  actions: read

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'deploy/**'
      - 'package.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'deploy/**'
      - 'package.json'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/geometry-jump

jobs:
  # Test the game (basic validation)
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate HTML
      run: |
        # Simple HTML validation - check if file is valid HTML
        if ! npx html-validate src/index.html; then
          echo "HTML validation failed, but continuing..."
        fi
        echo "HTML validation step completed"

    - name: Check JavaScript syntax
      run: |
        node -c src/game.js
        echo "JavaScript syntax check passed"

    - name: Test game assets
      run: |
        test -f src/index.html
        test -f src/style.css
        test -f src/game.js
        echo "All game assets present"

  # Build and push Docker image
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: write
      actions: read

    outputs:
      version: ${{ steps.version.outputs.new_version }}
      image: ${{ steps.image.outputs.image }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        persist-credentials: true

    - name: Debug info
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Working directory: $(pwd)"
        ls -la

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Bump version
      id: version
      run: |
        # Get current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"

        # Check if version exists
        if [ -z "$CURRENT_VERSION" ]; then
          echo "Error: Could not read current version"
          exit 1
        fi

        # Bump patch version
        npm version patch --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "New version: $NEW_VERSION"

        # Verify new version is different
        if [ "$CURRENT_VERSION" = "$NEW_VERSION" ]; then
          echo "Error: Version was not bumped"
          exit 1
        fi

        # Set output
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Commit and push version bump
      run: |
        git add package.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "🚀 Bump version to ${{ steps.version.outputs.new_version }}"

          # Push the version bump back to main branch
          echo "Pushing version bump to main branch..."
          git push origin main

          echo "Version ${{ steps.version.outputs.new_version }} committed and pushed successfully"
        fi

    - name: Checkout updated repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main
        fetch-depth: 0
        clean: true

    - name: Verify source files are latest
      run: |
        echo "🔍 Verifying source files..."
        echo "Current package.json version: $(node -p "require('./package.json').version")"
        echo "Expected version: ${{ steps.version.outputs.new_version }}"
        echo "Source files modified times:"
        ls -la src/
        echo "Build timestamp: $(date)"
        echo "Git log (last 3 commits):"
        git log --oneline -3
        echo "Current HEAD commit:"
        git rev-parse HEAD
        echo "Checking if working directory is clean:"
        git status --porcelain
        echo "Showing recent changes to game.js:"
        echo "Last 5 commits that touched src/game.js:"
        git log --oneline -5 -- src/game.js || echo "No recent commits found for src/game.js"

    - name: Clean Docker build environment
      run: |
        echo "🧹 Cleaning Docker build environment..."
        docker system df
        # Remove any existing images to ensure fresh build
        docker images | grep ${{ env.IMAGE_NAME }} | awk '{print $3}' | xargs -r docker rmi -f || true
        echo "Docker build environment cleaned"

    - name: Generate build context info
      id: buildinfo
      run: |
        echo "Generating build context information..."
        echo "Source file hashes:"
        GAME_HASH=$(sha256sum src/game.js | cut -d' ' -f1)
        HTML_HASH=$(sha256sum src/index.html | cut -d' ' -f1)
        CSS_HASH=$(sha256sum src/style.css | cut -d' ' -f1)
        echo "game_hash=${GAME_HASH}" >> $GITHUB_OUTPUT
        echo "html_hash=${HTML_HASH}" >> $GITHUB_OUTPUT
        echo "css_hash=${CSS_HASH}" >> $GITHUB_OUTPUT
        echo "Game.js hash: ${GAME_HASH}"
        echo "Index.html hash: ${HTML_HASH}"
        echo "Style.css hash: ${CSS_HASH}"

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=raw,value=${{ steps.version.outputs.new_version }}
          type=raw,value=latest
        labels: |
          org.opencontainers.image.title=Geometry Jump
          org.opencontainers.image.description=A simple Geometry Dash-style game
          org.opencontainers.image.version=${{ steps.version.outputs.new_version }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        no-cache: true
        pull: true
        build-args: |
          VERSION=${{ steps.version.outputs.new_version }}
          CACHEBUST=${{ github.run_number }}-${{ github.sha }}-${{ github.run_attempt }}-$(date +%s)-${{ steps.buildinfo.outputs.game_hash }}

    - name: Verify built image contains latest changes
      run: |
        echo "🔍 Verifying built image contains latest changes..."
        echo "Expected version: ${{ steps.version.outputs.new_version }}"
        echo "Build args used:"
        echo "  VERSION=${{ steps.version.outputs.new_version }}"
        echo "  CACHEBUST=${{ github.run_number }}-${{ github.sha }}-${{ github.run_attempt }}-$(date +%s)"
        echo "Source file hashes before build:"
        sha256sum src/game.js src/index.html src/style.css
        echo "Running test container to verify files..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }} sh -c "sha256sum /usr/share/nginx/html/game.js /usr/share/nginx/html/index.html /usr/share/nginx/html/style.css"
        echo "Checking for specific obstacle-related code in the built image:"
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }} sh -c "grep -n 'spawnObstacle\|drawObstacles\|obstacle' /usr/share/nginx/html/game.js | head -10" || echo "Could not find obstacle-related code patterns"

    - name: Set image output
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT

  # Create GitHub Release
  release:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch the latest changes including the version bump
        ref: main
        fetch-depth: 0

    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build-and-push.outputs.version }}
        name: Geometry Jump v${{ needs.build-and-push.outputs.version }}
        generate_release_notes: true
        make_latest: true
